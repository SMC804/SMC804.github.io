import("stdfaust.lib");


// 'substitutable' parameters
T = 150;                    // Tension [N]
radius = 3.5560e-04;        // Radius (0.016 gauge) [m]
rho = 8.05*10^3;            // Density [kg/m^3];
Emod = 174e4;               // Young modulus [Pa]
sigma1 = 0.1;              // Frequency dependent damping
sigma0 = 0.005;            // Frequency independent damping
Length = 1;

// calculated parameters
Area = ma.PI * radius^2;
I = (ma.PI * radius^4) / 4;
K = sqrt(Emod * I / rho / Area); // kappa
c = sqrt(T / rho / Area);

k = 1/44100; // hardcoded because nPoints needs to be known at compile time

//Stability condition
coeff = c^2*k^2 + 4*sigma1*k;
true_h = sqrt((coeff + sqrt((coeff)^2 + 16*k^2*K^2))/2);
nPoints = floor(Length / true_h);
h = Length / nPoints;

//----------------------------------Equations--------------------------------//
den = 1+sigma0*k;
A = (2*h^4-2*c^2*k^2*h^2-4*sigma1*k*h^2+6*K^2*k^2)/den/h^4;
B = (sigma0*k*h^2-h^2+4*sigma1*k)/den/h^2;
C = (c^2*k^2*h^2+2*sigma1*k*h^2-4*K^2*k^2)/den/h^4;
D = -2*sigma1*k/den/h^2;
E = K^2*k^2/den/h^4;

midCoeff = E,C,A,C,E;
midCoeffDel = 0,D,B,D,0;

r = 2;
t = 1;

scheme(points) = par(i,points,midCoeff,midCoeffDel);

//----------------------------------Process---------------------------------//

process = fd.model1D(nPoints,r,t,scheme(nPoints));